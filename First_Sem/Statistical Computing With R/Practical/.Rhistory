emp_id=c(6:8),
emp_name=c("Rashmi","Pranab","Tushar"),
salary=c(623.5,524.43,611.0),
start_date=as.Date(c("2014-11-25","2014-05-11","2015-03-27")),
dept=c("IT","Operations","Finance"),
stringAsFactors=FALSE
)
emp.newdata
emp.finaldata<-rbind(emp.data,emp.newdata)
emp.finaldata
print(4*6+5)
print((4*6)+5)
print(4*(6+5))
print((4+6)^2*5/10+9-1)
x<-2
x
x=3
x
4->x
x
assign("x",5)
x
rm(x)
x
x<-1:10
y<--5:4
x
y
length(x)
length(y)
x+y
x-y
length(x+y)
x*y
x/y
x^y
x<-1:10
y<-c(1,2)
x+y
z<-c(1,2,3)
x+z
x<-10:1
x
y<--4:5
y
x>y
x<=5
x<y
any(x<y)
any(x>y)
all(x>y)
nchar(y)
x
x[1] # retrieve first element of x
#x[1,2] # retrieves first and second element of x
x[c(1,4)]
w<-1:3
names(w)<-c("a","b","c")
w
zchar<-c("Hockey",NA,"CRicket")
zchar
nchar(z)
is.na(zchar)
z<-c(1,2,NA,4,5,NA)
mean(z)
mean(z,na.rm=TRUE)
var(z,na.rm = TRUE)
z<-c(1,NULL,3)
z
is.null(z)
d<-NULL
is.null(d)
library(magrittr)
x<-1:10
x%>%mean
z<-c(1,2,NA,8,3,NA,3)
z%>%is.na%>%sum
z%>%mean(na.rm = TRUE)
x<-10:1
y< -4:5
q <-c("Hockey","Football","Baseball", "Kabaddi", "Rugby","Pingpong", "Basketball","Tennis", "Cricket", "Volleyball")
theDF <-data.frame(x, y, q)
theDF
theDF <-data.frame(First=x,Second=y, Sport=q)
names(theDF)
names(theDF)[3]
rownames(theDF)
rownames(theDF) <- c("One","Two", "Three", "Four", "Five","Six", "Seven", "Eight", "Nice","Ten")
rownames(theDF) <- NULL
rownames(theDF)
#Printing first few rows
head(theDF)
#Printing first seven rows
head(theDF, n=7)
#Printing last few rows
tail(theDF)
class(theDF)
#Structure of data frame by
#variables
str(theDF)
theDF[3,2]; theDF[3, 2:3]
theDF[, 3]; theDF[3,]
theDF[, c("First", "Sport")]
theDF[, "Sport", drop=FALSE]
#Three element list
list1 <- list(1,2,3)
#Single element list
list2 <- list(c(1,2,3))
#Two vector list
list3 <- list(c(1,2,3), 3:7)
#List with data.frame and vector
list4 <- list(theDF, 1:10)
#Three element list
list5 <- list(theDF, 1:10, list3)
#Names of the list
names(list5)
names(list5) <-c("data.frame","vector", "list")
names(list5)
list5
list6 <- list(TheDataFrame=theDF,
TheVector=1:10, TheList=list3)
names(list6)
#Use double square brackets
#Specify either the element number or name
list5[[1]]
list5[["data.frame"]]
# This allows access to only one element at a time
#Accessed element manipulation
list5[[1]]$Sport #Sport variable
list5[[1]][, "Second"]
list5[[1]][, "Second", drop=F]
length(list5)
#Adding new element
list5[[4]] <- 2
list5[["NewElement"]] <-3:6
A <- matrix(1:10, nrow=5)
B <- matrix(21:30, nrow=5)
C <- matrix(21:40, nrow=2)
nrow(A)
ncol(B)
dim(C)
A + B
A * B
A - B
A = B
# A %*% C will work
# A %*% B will not work
# Both A and B are 5 x 2 matrices
# so we will transpose B
A %*% t(B)
#Column/row names of matrix:
colnames(A)
colnames(A) <- c("Left", "Right")
rownames(A) <- c("1st", "2nd",
"3rd", "4th", "5th")
t(A)
colnames(B) <- c("First",
"Second")
rownames(B) <- c("One", "Two",
"Three", "Four", "Five")
theArray <- array(1:12,dim=c(2,3,2))
# 2 dimensional matrices both with 2 rows and 3 columns
theArray [1, , ] # 1st row of both
theArray[1, ,1] #1st row of first
theArray[,1,] # 1st column of both
iris <- read.csv(url("http://archive.ics.uci.edu/ml/machine-learning-databases/iris/iris.data"), header = FALSE)
head(iris)
# Add column names for V1, V2, V3, V4 and V5 columns to the Iris data
names(iris) <- c("Sepal.Length", "Sepal.Width", "Petal.Length",
"Petal.Width", "Species")
write.csv(iris, "iris.csv")
library(magrittr) #for pipes
sink("session3.out")
plot(iris)
summary(iris)
iris$Sepal.Length.SQRT <- iris$Sepal.Length %>% sqrt()
#iris %>% cor(Sepal.Length, Sepal.Width)
sink()
detach("package:magrittr")
# Built In Functions in R.
#round()
print(round(3.1415))
round(3.1415, digits = 2)
#factorial()
factorial(3)
factorial(2*3)
#mean()
mean(1:6)
mean(c(1:30))
die <- 1:6
sample(x = die, size = 1)
sample(x = die, size = 1)
sample (x = die, size = 1, replace=TRUE)
sample(x = die, size = 2)
sample(x - die, size = 2)
sample(x = die, size = 2, replace=TRUE)
roll <- function() {
die <- 1:6
dice <- sample(die, size = 2, replace = TRUE)
sum(dice)
}
# Function with arguments with default values
roll2 <- function(dice = 1:6) {
dice <- sample(dice, size = 2, replace = TRUE)
sum(dice)
}
roll()
roll()
roll()
roll2()
roll2()
roll2()
# for loop
#while loop
print_words <- function(sentence) {
for (word in sentence) {
print(word)
}
}
best_practice <- c("Let", "the", "computer", "do", "the", "work")
print_words(best_practice)
print_words(best_practice[-6])
if (y < 20) {
x <- "Too low"
} else {
x <- "Too high"
}
#Can you get anything from this?
#Will this work?
check.y <- function(y) {
if (y < 20) {
print("Too Low") } else {
print("Two high")
}}
check.y(10)
check.y(30)
#Will this work?
y <- 1:40
ifelse(y<20, "Too low", "Too high")
#Itâ€™s a logical as:
ifelse(y<20, TRUE, FALSE)
y <- 1:40
ifelse(y<20, 1, 0)
#Will this work too?
x <- 1:99
x1 <- ifelse(x<20, 1,0) #Binary numbers
x2.1 <- ifelse(x<20, "<20", "20+") #Binary text
x2.2 ? for x between 20 and less than 40
#Make this function work!
if (temp <= 0) {
"freezing"}
#Will this work too?
x <- 1:99
x1 <- ifelse(x<20, 1,0) #Binary numbers
x2.1 <- ifelse(x<20, "<20", "20+") #Binary text
x2.2 ? for x between 20 and less than 40
# Will this work too?
x <- 1:99
# Binary numbers
x1 <- ifelse(x < 20, 1, 0)
# Binary text
x2.1 <- ifelse(x < 20, "<20", "20+")
# Define categorical variables for different ranges
x2.2 <- ifelse(x >= 20 & x < 40, "20-39", NA)
x2.3 <- ifelse(x >= 40 & x < 100, "40-99", NA)
# Now combine them in a single column with <20 =1, 20-39 = 2 and 40-99 = 3
# Create categorical variable of x
x3 <- ifelse(x < 20, 1, ifelse(x < 40, 2, 3))
# Output the categorical variable
x3
# Display frequency count of categories
table(x3)
install.packages(tinytex)
install.packages("tinytex"")
install.packages("tinytex")
install.packages("tinytex")
install.packages("tinytex")
clear
library(DBI)
install.packages("DBI")
install.packages("dbplyr")
install.packages("tidyverse")
library(DBI)
library(dbplyr)
library(tidyverse)
install.packages("nycflights13")
library("nycflights13")
flights
jan1<-filter(flights, months==1, day==1)
(jan1<-filter(flights, months==1, day==1))
jan1<-filter(flights, months==1 | day==1)
jan1<-filter(flights, month==1 , day==1)
flights
jan1<-filter(flights, month==1 , day==1)
(jan1<-filter(flights, month==1, day==1))
jan1<-filter(flights, month==1 , day==1)
jan1<-filter(flights,month==1,day==1)
flights
jan1<-filter(flights,month==1,day==1)
jan1<-filter(flights,month==1, day==1)
(jan1<-filter(flights, month==1, day==1))
jan1<-filter(flights,month==1 & day==1)
jan1<-filter(flights,month==1 , day==1)
library(DBI)
library(dbplyr)
library(tidyverse)
#install.packages("nycflights13")
library("nycflights13")
flights
jan1<-filter(flights,month==1 , day==1)
jan1<-deplyr::filter(flights,month==1 , day==1)
jan1<-dbplyr::filter(flights,month==1 , day==1)
library(DBI)
library(dbplyr)
library(tidyverse)
#install.packages("DBI")
#install.packages("dbplyr")
install.packages("tidyverse")
#install.packages("DBI")
#install.packages("dbplyr")
install.packages("ragg")
install.packages("tidyverse")
library(DBI)
library(dbplyr)
#install.packages("DBI")
#install.packages("dbplyr")
install.packages("textshaping")
#install.packages("DBI")
#install.packages("dbplyr")
install.packages("textshaping")
install.packages("ragg")
install.packages("tidyverse")
library(DBI)
library(dbplyr)
library(tidyverse)
install.packages("tidyverse")
install.packages("ragg")
#install.packages("DBI")
#install.packages("dbplyr")
install.packages("textshaping")
install.packages("ragg")
install.packages("tidyverse")
library(DBI)
library(dbplyr)
library(tidyverse)
#install.packages("nycflights13")
library("nycflights13")
flights
jan1<-filter(flights,month==1 , day==1)
(jan1<-filter(flights, month==1, day==1))
jan1<-filter(flights,month==1 , day==1)
jan1
jan1
summarise(flights, delay=mean(dep_delay, na.rm=TRUE))
hist(delay)
hist(dep_delay)
hist(flights.dep_delay)
hist(flights$dep_delay)
summarise(flights, delay=sd(dep_delay, na.rm = TRUE))
summarise(flights, delay=median(dep_delay, na.rm = TRUE))
summarise(by_day, delay=mean(dep_delay, rm.na=TRUE))
## Group By
by_day<-group_by(flights, year, month, day)
summarise(by_day, delay=mean(dep_delay, rm.na=TRUE))
## Group By
by_day<-group_by(flights, year, month, day)
summarise(by_day, delay=mean(dep_delay, rm.na=TRUE))
## Multiple Operations: pipes
delays<-flights%>%
group_by(dest)%>%
summarise(
count=n(),
dist=mean(arr_delay,na.rm=TRUE)
%>%
filter(count>20, dest !="HNL")
)
## Multiple Operations: pipes
delays<-flights%>%
group_by(dest)%>%
summarise(
count=n(),
dest=mean(arr_delay,na.rm=TRUE)
%>%
filter(count>20, dest !="HNL")
)
## Multiple Operations: pipes
delays<-flights%>%
group_by(dest)%>%
summarise(
count=n(),
dist=mean(arr_delay,na.rm=TRUE)
%>%
filter(count>20, dest !="HNL")
)
## Multiple Operations: pipes
delays<-flights%>%
group_by(dest)%>%
summarise(
count=n,
dist=mean(arr_delay,na.rm=TRUE)
%>%
filter(count>20, dest !="HNL")
)
not_cancelled<- flights%>%
filter(!is.na(dep_delay),!is.na(arr_delay))
driver<-rsDriver(browser="firefox",
port=4555L,
verbose = FALSE,
chromever = NULL)
library(RSelenium)
driver<-rsDriver(browser="firefox",
port=4555L,
verbose = FALSE,
chromever = NULL)
remote_driver<-driver[["client"]]
url <- "https://theordinary.com/en-de/category/skincare/serums"
driver<-rsDriver(browser="firefox",
port=4555L,
verbose = TRUE,
chromever = NULL)
driver<-rsDriver(browser="chrome",
port=80,
verbose = TRUE,
chromever = NULL)
driver<-rsDriver(browser="chrome",
port=9100,
verbose = TRUE,
chromever = NULL)
driver<-rsDriver(browser="google-chrome",
port=9100,
verbose = TRUE,
chromever = NULL)
driver<-rsDriver(browser="chrome",
port=9100L,
verbose = TRUE,
chromever = NULL)
driver<-rsDriver(browser="chrome",
port=9100L,
verbose = TRUE,
chromever = NULL)
driver<-rsDriver(browser="chrome",
port=9101L,
verbose = TRUE,
chromever = NULL)
driver<-rsDriver(browser="chrome",
port=9101L,
verbose = TRUE,
chromever = "128.0.6613.84"
)
driver<-rsDriver(browser="firefox",
port=4555L,
verbose = TRUE,
chromever = "136.0"
)
driver<-rsDriver(browser="firefox",
port=4555L,
verbose = TRUE
)
fprof <- makeFirefoxProfile(list("moz:firefoxOptions" = list(args = list("-profile", "/home/codexplorer/selenium_profile"))))
driver <- rsDriver(browser = "firefox", extraCapabilities = fprof)
fprof <- makeFirefoxProfile(list("moz:firefoxOptions" = list(args = list("-profile", "/home/codexplorer/selenium_profile"))))
driver <- rsDriver(browser = "firefox", extraCapabilities = fprof)
url <- "https://theordinary.com/en-de/category/skincare/serums"
driver<-rsDriver(browser="firefox",
port=4567L,
verbose = TRUE
)
url <- "https://theordinary.com/en-de/category/skincare/serums"
url <- "https://theordinary.com/en-de/category/skincare/serums"
remDr <- remoteDriver(remoteServerAddr = "localhost", port = 4444L, browserName = "firefox")
remDr$open()
clear
library(RSelenium)
# Start a Selenium firefox browser
driver <- rsDriver(browser = "firefox",
port = 4444L,
verbose = FALSE,
chromever = NULL)
# Start a Selenium firefox browser
driver <- rsDriver(browser = "firefox",
port = 4555L,
verbose = FALSE,
chromever = NULL)
install.packages("RSelenium")
install.packages("wdman")  # For Selenium driver management
install.packages("rvest")  # For HTML parsing (optional)
library(RSelenium)
library(rvest)
# Start Selenium Server and Firefox driver
driver <- rsDriver(
browser = "firefox",
port = 4567L,
verbose = FALSE
)
# Start Selenium Server and Firefox driver
driver <- rsDriver(
browser = "firefox",
port = 4567L,
verbose = FALSE
)
# Start Selenium Server and Firefox driver
driver <- rsDriver(
browser = "firefox",
port = 4567L,
verbose = FALSE
)
# Start Selenium Server and Firefox driver
driver <- rsDriver(
browser = "chrome",
port = 4567L,
verbose = FALSE
)
